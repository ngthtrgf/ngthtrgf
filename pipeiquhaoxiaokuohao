
        public bool IsAlpha(string value){
            return Regex.IsMatch(value, @"^\w+$");
        }
        public bool IsEmail(string value){
            return Regex.IsMatch(value,@"^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$");
        }
         /// 匹配3位或4位区号的电话号码，其中区号可以用小括号括起   /// 也可以不用，区号与本地号间可以用连字号或空格间隔， /// 也可以没有间隔
          public  bool IsPhone(string input)
          {
              string pattern = "^\\(0\\d{2}\\)[- ]?\\d{8}$|^0\\d{2}[- ]?\\d{8}$|^\\(0\\d{3}\\)[- ]?\\d{7}$|^0\\d{3}[- ]?\\d{7}$";
              Regex regex = new Regex(pattern);
              return regex.IsMatch(input);
          }
          public  bool IsMobilePhone(string input)
          {
              Regex regex = new Regex("^13\\d{9}$");
              return regex.IsMatch(input);
  
         }
        public bool IsZip(string value){
 
            return Regex.IsMatch(value, @"^\d{6}$");
        }
        public bool IsEnglish(string input)
         {
             Regex regex = new Regex("^[A-Za-z]+$");
             return regex.IsMatch(input);
         }         
        public bool IsChineseCh(string input)
          {
              Regex regex = new Regex("^[\u4e00-\u9fa5]+$");
              return regex.IsMatch(input);
          }
        public  bool IsURL(string input)
         {
             string pattern = @"^[a-zA-Z]+://(\w+(-\w+)*)(\.(\w+(-\w+)*))*(\?\S*)?$";
             Regex regex = new Regex(pattern);
            return regex.IsMatch(input);
